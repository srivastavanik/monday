const express = require('express');
const router = express.Router();
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const logger = require('../utils/logger');

// Create results directory if it doesn't exist
const resultsDir = path.join(__dirname, '../data/simulation_results');
if (!fs.existsSync(resultsDir)) {
  fs.mkdirSync(resultsDir, { recursive: true });
}

// Path to RDKit scripts
const MOLECULAR_PROPERTIES_SCRIPT = path.join(__dirname, '../utils/rdkit/molecular_properties.py');
const ADMET_PREDICTION_SCRIPT = path.join(__dirname, '../utils/rdkit/admet_prediction.py');
const MOLECULAR_DOCKING_SCRIPT = path.join(__dirname, '../utils/rdkit/molecular_docking.py');
const SIMILARITY_SEARCH_SCRIPT = path.join(__dirname, '../utils/rdkit/similarity_search.py');
const MOLECULE_OPERATIONS_SCRIPT = path.join(__dirname, '../utils/rdkit/molecule_operations.py');

// Helper function to run RDKit Python scripts
const runRDKitScript = (scriptPath, args = []) => {
  return new Promise((resolve, reject) => {
    const pythonProcess = spawn('python', [scriptPath, ...args]);
    
    let result = '';
    let error = '';
    
    pythonProcess.stdout.on('data', (data) => {
      result += data.toString();
    });
    
    pythonProcess.stderr.on('data', (data) => {
      error += data.toString();
    });
    
    pythonProcess.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`RDKit script exited with code ${code}: ${error}`));
      } else {
        try {
          resolve(JSON.parse(result));
        } catch (e) {
          resolve(result);
        }
      }
    });
  });
};
        
// Helper function to create a temporary file
const createTempFile = (prefix, suffix) => {
  const tempId = uuidv4();
  return path.join(resultsDir, `${prefix}_${tempId}${suffix}`);
};
// Calculate molecular properties
router.post('/properties', async (req, res) => {
  try {
    const { smiles } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES string is required' });
    }
    
    // Run molecular properties calculation script
    const properties = await runRDKitScript(MOLECULAR_PROPERTIES_SCRIPT, [smiles]);
    
    // Save result
    const resultId = uuidv4();
    const resultFile = path.join(resultsDir, `properties_${resultId}.json`);
    fs.writeFileSync(resultFile, JSON.stringify({ 
      id: resultId,
      timestamp: new Date().toISOString(),
      smiles,
      properties
    }, null, 2));
    
    return res.json({
      id: resultId,
      properties
    });
    
  } catch (error) {
    logger.error(`Error calculating molecular properties: ${error.message}`);
    return res.status(500).json({
      error: 'Error calculating molecular properties',
      details: error.message
    });
  }
});

// Predict ADMET properties
router.post('/admet', async (req, res) => {
  try {
    const { smiles } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES string is required' });
    }
    
    // Run ADMET prediction script
    const admetResults = await runRDKitScript(ADMET_PREDICTION_SCRIPT, [smiles]);
    
    // Save result
    const resultId = uuidv4();
    const resultFile = path.join(resultsDir, `admet_${resultId}.json`);
    fs.writeFileSync(resultFile, JSON.stringify({
      id: resultId,
      timestamp: new Date().toISOString(),
      smiles,
      admet: admetResults
    }, null, 2));
    
    return res.json({
      id: resultId,
      admet: admetResults
    });
    
  } catch (error) {
    logger.error(`Error predicting ADMET properties: ${error.message}`);
    return res.status(500).json({
      error: 'Error predicting ADMET properties',
      details: error.message
    });
  }
});

// Run molecular docking
router.post('/docking', async (req, res) => {
  try {
    const { 
      receptorPdb, 
      ligandSmiles, 
      exhaustiveness = 8, 
      centerX = 0, 
      centerY = 0, 
      centerZ = 0, 
      sizeX = 20, 
      sizeY = 20, 
      sizeZ = 20 
    } = req.body;
    
    if (!receptorPdb) {
      return res.status(400).json({ error: 'Receptor PDB data is required' });
    }
    
    if (!ligandSmiles) {
      return res.status(400).json({ error: 'Ligand SMILES string is required' });
    }
        
        # Save receptor to temporary file
        receptor_pdbqt = tempfile.NamedTemporaryFile(suffix=".pdbqt", delete=False).name
        with open(receptor_pdbqt, 'w') as f:
            f.write(receptor_pdb)
        
        # Prepare docking configuration
        config_file = tempfile.NamedTemporaryFile(suffix=".txt", delete=False).name
        with open(config_file, 'w') as f:
            f.write(f"receptor = {receptor_pdbqt}\\n")
            f.write(f"ligand = {ligand_pdbqt}\\n")
            f.write(f"center_x = {center_x}\\n")
            f.write(f"center_y = {center_y}\\n")
            f.write(f"center_z = {center_z}\\n")
            f.write(f"size_x = {size_x}\\n")
            f.write(f"size_y = {size_y}\\n")
            f.write(f"size_z = {size_z}\\n")
            f.write(f"exhaustiveness = {exhaustiveness}\\n")
            f.write("num_modes = 9\\n")
            f.write("energy_range = 3\\n")
        
        # Run Vina docking
        output_file = tempfile.NamedTemporaryFile(suffix=".pdbqt", delete=False).name
        cmd = f"vina --config {config_file} --out {output_file}"
        
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        
        # Parse results
        results = []
        current_mode = None
        
        for line in stdout.decode().split('\\n'):
            if line.startswith('-----+'):
                continue
            if line.startswith('mode | affinity'):
                continue
            if line.strip() and line[0].isdigit():
                parts = line.split()
                if len(parts) >= 3:
                    mode = int(parts[0])
                    affinity = float(parts[1])
                    rmsd = float(parts[2])
                    current_mode = {"mode": mode, "affinity": affinity, "rmsd": rmsd}
                    results.append(current_mode)
        
        # Clean up
        for file in [ligand_pdbqt, ligand_mol, receptor_pdbqt, config_file]:
            try:
                os.remove(file)
            except:
                pass
        
        # Read docked poses
        with open(output_file, 'r') as f:
            docked_poses = f.read()
        
        try:
            os.remove(output_file)
        except:
            pass
        
        return {
            "results": results,
            "docked_poses": docked_poses
        }
    except Exception as e:
        return {"error": str(e), "traceback": traceback.format_exc()}

def compare_molecules(smiles1, smiles2):
    """Compare two molecules and calculate similarity."""
    try:
        mol1 = Chem.MolFromSmiles(smiles1)
        mol2 = Chem.MolFromSmiles(smiles2)
        
        if mol1 is None or mol2 is None:
            return {"error": "Invalid SMILES string(s)"}
        
        # Calculate fingerprints
        from rdkit.Chem import DataStructs
        from rdkit.Chem import AllChem
        
        fp1 = AllChem.GetMorganFingerprintAsBitVect(mol1, 2, nBits=2048)
        fp2 = AllChem.GetMorganFingerprintAsBitVect(mol2, 2, nBits=2048)
        
        # Calculate similarities
        tanimoto = DataStructs.TanimotoSimilarity(fp1, fp2)
        dice = DataStructs.DiceSimilarity(fp1, fp2)
        
        # Calculate Maximum Common Substructure
        from rdkit.Chem import rdFMCS
        mcs = rdFMCS.FindMCS([mol1, mol2])
        mcs_mol = Chem.MolFromSmarts(mcs.smartsString)
        mcs_smarts = mcs.smartsString
        
        # Draw MCS highlighted in each molecule
        matches1 = mol1.GetSubstructMatches(mcs_mol)
        matches2 = mol2.GetSubstructMatches(mcs_mol)
        
        # Compare properties
        props1 = {
            "molWeight": Descriptors.MolWt(mol1),
            "logP": Crippen.MolLogP(mol1),
            "tpsa": MolSurf.TPSA(mol1),
            "hbondDonorCount": Lipinski.NumHDonors(mol1),
            "hbondAcceptorCount": Lipinski.NumHAcceptors(mol1),
            "rotatableBondCount": Descriptors.NumRotatableBonds(mol1),
        }
        
        props2 = {
            "molWeight": Descriptors.MolWt(mol2),
            "logP": Crippen.MolLogP(mol2),
            "tpsa": MolSurf.TPSA(mol2),
            "hbondDonorCount": Lipinski.NumHDonors(mol2),
            "hbondAcceptorCount": Lipinski.NumHAcceptors(mol2),
            "rotatableBondCount": Descriptors.NumRotatableBonds(mol2),
        }
        
        return {
            "similarity": {
                "tanimoto": tanimoto,
                "dice": dice,
                "mcs_smarts": mcs_smarts,
                "mcs_atom_count": mcs.numAtoms,
                "mcs_bond_count": mcs.numBonds,
            },
            "properties1": props1,
            "properties2": props2,
        }
    except Exception as e:
        return {"error": str(e), "traceback": traceback.format_exc()}

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(json.dumps({"error": "Not enough arguments provided"}))
        sys.exit(1)
        
    operation = sys.argv[1]
    
    if operation == "properties":
        if len(sys.argv) < 3:
            print(json.dumps({"error": "SMILES string required"}))
            sys.exit(1)
        print(json.dumps(calculate_properties(sys.argv[2])))
        
    elif operation == "3d_structure":
        if len(sys.argv) < 3:
            print(json.dumps({"error": "SMILES string required"}))
            sys.exit(1)
        print(json.dumps(generate_3d_structure(sys.argv[2])))
        
    elif operation == "convert":
        if len(sys.argv) < 5:
            print(json.dumps({"error": "Input, input format, and output format required"}))
            sys.exit(1)
        print(json.dumps(convert_molecule(sys.argv[2], sys.argv[3], sys.argv[4])))
        
    elif operation == "admet":
        if len(sys.argv) < 3:
            print(json.dumps({"error": "SMILES string required"}))
            sys.exit(1)
        print(json.dumps(predict_admet(sys.argv[2])))
        
    elif operation == "compare":
        if len(sys.argv) < 4:
            print(json.dumps({"error": "Two SMILES strings required"}))
            sys.exit(1)
        print(json.dumps(compare_molecules(sys.argv[2], sys.argv[3])))
        
    elif operation == "docking":
        if len(sys.argv) < 10:
            print(json.dumps({"error": "Receptor PDB, ligand SMILES, and docking parameters required"}))
            sys.exit(1)
        receptor_pdb = sys.argv[2]
        ligand_smiles = sys.argv[3]
        exhaustiveness = int(sys.argv[4])
        center_x = float(sys.argv[5])
        center_y = float(sys.argv[6])
        center_z = float(sys.argv[7])
        size_x = float(sys.argv[8])
        size_y = float(sys.argv[9])
        size_z = float(sys.argv[10])
        print(json.dumps(run_docking(receptor_pdb, ligand_smiles, exhaustiveness, center_x, center_y, center_z, size_x, size_y, size_z)))
    else:
        print(json.dumps({"error": f"Unknown operation: {operation}"}))
`
);

// Function to call the RDKit Python script
const callRDKitScript = (operation, ...args) => {
  return new Promise((resolve, reject) => {
    const pythonProcess = spawn('python', [
      RDKIT_SCRIPT,
      operation,
      ...args.map(arg => String(arg))
    ]);
    
    let resultData = '';
    let errorData = '';
    
    pythonProcess.stdout.on('data', (data) => {
      resultData += data.toString();
    });
    
    pythonProcess.stderr.on('data', (data) => {
      errorData += data.toString();
    });
    
    pythonProcess.on('close', (code) => {
      if (code !== 0) {
        logger.error(`RDKit script process exited with code ${code}: ${errorData}`);
        return reject(new Error(`RDKit operation failed: ${errorData}`));
      }
      
      try {
        const result = JSON.parse(resultData);
        resolve(result);
      } catch (error) {
        logger.error(`Failed to parse RDKit result: ${error.message}`);
        reject(error);
      }
    });
  });
};

// Calculate molecular properties
router.post('/properties', async (req, res) => {
  try {
    const { smiles } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES structure is required' });
    }
    
    const properties = await callRDKitScript('properties', smiles);
    
    if (properties.error) {
      logger.error(`Error calculating properties: ${properties.error}`);
      return res.status(400).json({ error: properties.error });
    }
    
    res.json(properties);
  } catch (error) {
    logger.error(`Error in properties calculation: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Generate 3D structure
router.post('/3d-structure', async (req, res) => {
  try {
    const { smiles } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES structure is required' });
    }
    
    const result = await callRDKitScript('3d_structure', smiles);
    
    if (result.error) {
      logger.error(`Error generating 3D structure: ${result.error}`);
      return res.status(400).json({ error: result.error });
    }
    
    res.json(result);
  } catch (error) {
    logger.error(`Error in 3D structure generation: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Convert between molecular formats
router.post('/convert', async (req, res) => {
  try {
    const { input, inputFormat, outputFormat } = req.body;
    
    if (!input || !inputFormat || !outputFormat) {
      return res.status(400).json({ 
        error: 'Input, inputFormat, and outputFormat are required' 
      });
    }
    
    const result = await callRDKitScript('convert', input, inputFormat, outputFormat);
    
    if (result.error) {
      logger.error(`Error converting molecule: ${result.error}`);
      return res.status(400).json({ error: result.error });
    }
    
    res.json(result);
  } catch (error) {
    logger.error(`Error in molecule conversion: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Predict ADMET properties
router.post('/admet', async (req, res) => {
  try {
    const { smiles } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES structure is required' });
    }
    
    const result = await callRDKitScript('admet', smiles);
    
    if (result.error) {
      logger.error(`Error predicting ADMET: ${result.error}`);
      return res.status(400).json({ error: result.error });
    }
    
    res.json(result);
  } catch (error) {
    logger.error(`Error in ADMET prediction: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Compare molecules
router.post('/compare', async (req, res) => {
  try {
    const { smiles1, smiles2 } = req.body;
    
    if (!smiles1 || !smiles2) {
      return res.status(400).json({ error: 'Two SMILES structures are required' });
    }
    
    const result = await callRDKitScript('compare', smiles1, smiles2);
    
    if (result.error) {
      logger.error(`Error comparing molecules: ${result.error}`);
      return res.status(400).json({ error: result.error });
    }
    
    res.json(result);
  } catch (error) {
    logger.error(`Error in molecule comparison: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Run docking simulation
router.post('/docking', async (req, res) => {
  try {
    const { 
      receptorPdb, 
      ligandSmiles, 
      exhaustiveness = 8,
      center = { x: 0, y: 0, z: 0 },
      size = { x: 20, y: 20, z: 20 }
    } = req.body;
    
    if (!receptorPdb || !ligandSmiles) {
      return res.status(400).json({ 
        error: 'Receptor PDB structure and ligand SMILES are required' 
      });
    }
    
    // Create a unique ID for this simulation
    const simulationId = uuidv4();
    
    // Start the simulation (this might take a while)
    const result = await callRDKitScript(
      'docking',
      receptorPdb,
      ligandSmiles,
      exhaustiveness,
      center.x, center.y, center.z,
      size.x, size.y, size.z
    );
    
    if (result.error) {
      logger.error(`Error in docking simulation: ${result.error}`);
      return res.status(400).json({ error: result.error });
    }
    
    // Save the results
    const simulationData = {
      id: simulationId,
      timestamp: new Date().toISOString(),
      type: 'docking',
      parameters: {
        ligandSmiles,
        exhaustiveness,
        center,
        size
      },
      results: result
    };
    
    const resultsFile = path.join(resultsDir, `${simulationId}.json`);
    fs.writeFileSync(resultsFile, JSON.stringify(simulationData, null, 2));
    
    res.json({ 
      simulationId, 
      status: 'completed',
      results: result
    });
  } catch (error) {
    logger.error(`Error in docking simulation: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Run molecular dynamics simulation
router.post('/molecular-dynamics', async (req, res) => {
  try {
    const { 
      smiles, 
      simulationTime = 10, // in picoseconds
      temperature = 300, // in Kelvin
      pressure = 1.0, // in bar
      solvent = 'water'
    } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES structure is required' });
    }
    
    // Create a unique ID for this simulation
    const simulationId = uuidv4();
    
    // For now, we'll return a mock result since full MD simulation is resource-intensive
    const mockResult = {
      id: simulationId,
      timestamp: new Date().toISOString(),
      type: 'molecular-dynamics',
      parameters: {
        smiles,
        simulationTime,
        temperature,
        pressure,
        solvent
      },
      status: 'completed',
      results: {
        energies: {
          potential: -50000 + Math.random() * 5000,
          kinetic: 20000 + Math.random() * 2000,
          total: -30000 + Math.random() * 3000
        },
        rmsd: 1.2 + Math.random() * 0.5,
        gyration: 10 + Math.random() * 2,
        stability: "stable"
      }
    };
    
    // Save the mock results
    const resultsFile = path.join(resultsDir, `${simulationId}.json`);
    fs.writeFileSync(resultsFile, JSON.stringify(mockResult, null, 2));
    
    // Return the simulation ID and mock results
    res.json(mockResult);
  } catch (error) {
    logger.error(`Error in molecular dynamics simulation: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Get simulation results
router.get('/results/:id', (req, res) => {
  try {
    const { id } = req.params;
    const resultsFile = path.join(resultsDir, `${id}.json`);
    
    if (!fs.existsSync(resultsFile)) {
      return res.status(404).json({ error: 'Simulation results not found' });
    }
    
    const simulationData = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
    res.json(simulationData);
  } catch (error) {
    logger.error(`Error retrieving simulation results: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

// Save simulation results
router.post('/results', (req, res) => {
  try {
    const simulationData = req.body;
    
    if (!simulationData || !simulationData.id) {
      return res.status(400).json({ error: 'Valid simulation data is required' });
    }
    
    const resultsFile = path.join(resultsDir, `${simulationData.id}.json`);
    fs.writeFileSync(resultsFile, JSON.stringify(simulationData, null, 2));
    
    res.json({ 
      success: true, 
      message: 'Simulation results saved successfully',
      id: simulationData.id
    });
  } catch (error) {
    logger.error(`Error saving simulation results: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router; 