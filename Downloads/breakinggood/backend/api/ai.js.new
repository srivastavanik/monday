const express = require('express');
const router = express.Router();
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const path = require('path');
const logger = require('../utils/logger');

// Create results directory if it doesn't exist
const resultsDir = path.join(__dirname, '../data/ai_results');
if (!fs.existsSync(resultsDir)) {
  fs.mkdirSync(resultsDir, { recursive: true });
}

// Claude API client configuration
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';

// Configure Anthropic API client
const claudeClient = axios.create({
  baseURL: ANTHROPIC_API_URL,
  headers: {
    'Content-Type': 'application/json',
    'anthropic-version': '2023-06-01',
    'x-api-key': ANTHROPIC_API_KEY
  }
});

// Helper function for Claude API requests
const askClaude = async (systemPrompt, userPrompt, model = 'claude-3-7-sonnet-20250219') => {
  try {
    const response = await claudeClient.post('', {
      model: model,
      system: systemPrompt,
      messages: [
        {
          role: 'user',
          content: userPrompt
        }
      ],
      max_tokens: 20000,
      temperature: 1.0,
      stream: false
    });

    return {
      id: response.data.id,
      content: response.data.content,
      model: response.data.model,
      usage: response.data.usage
    };
  } catch (error) {
    logger.error(`Claude API error: ${error.message}`);
    if (error.response) {
      logger.error(`Claude API response: ${JSON.stringify(error.response.data)}`);
    }
    throw new Error(`Error calling Claude API: ${error.message}`);
  }
};

// Extract SMILES structures from Claude's response
const extractSMILES = (content) => {
  const smilesRegex = /\b([A-Za-z0-9@+\-\[\]\(\)\\\/\%=#$!.~{},*]+)\b/g;
  const potentialMatches = content.match(smilesRegex) || [];
  
  // Filter to only keep valid SMILES-like strings
  return potentialMatches.filter(match => {
    // Basic validation for SMILES-like strings
    return (
      match.length > 5 && // Reasonable minimum length
      !match.includes('http') && // Not a URL
      (
        match.includes('C') || 
        match.includes('N') || 
        match.includes('O')
      ) && // Contains common elements
      (
        match.includes('(') || 
        match.includes('=') || 
        match.includes('[') || 
        match.includes('#')
      ) // Contains bond or structural notation
    );
  });
};

// Process Claude's molecule design to standardized structure
const processMoleculeDesign = async (claudeResponse) => {
  try {
    // Extract potential SMILES strings
    const smilesCandidates = extractSMILES(claudeResponse.content[0].text);
    
    if (smilesCandidates.length === 0) {
      throw new Error("No valid SMILES structures found in Claude's response");
    }
    
    // Validate each SMILES with RDKit and get properties
    const validatedMolecules = [];
    
    for (const smiles of smilesCandidates) {
      try {
        // Use the simulation API to validate and compute properties
        const rdkitResponse = await axios.post('http://localhost:5000/api/simulation/properties', {
          smiles: smiles
        });
        
        if (!rdkitResponse.data.error) {
          // This is a valid SMILES, add it to results
          validatedMolecules.push({
            smiles: smiles,
            name: `Claude Generated Molecule ${validatedMolecules.length + 1}`,
            properties: rdkitResponse.data,
            dateCreated: new Date().toISOString()
          });
        }
      } catch (err) {
        logger.error(`Error validating SMILES ${smiles}: ${err.message}`);
        // Skip invalid SMILES
      }
    }
    
    return validatedMolecules;
  } catch (error) {
    logger.error(`Error processing molecule design: ${error.message}`);
    throw new Error(`Failed to process molecule design: ${error.message}`);
  }
};

// Generate molecules with Claude
router.post('/generate-molecule', async (req, res) => {
  try {
    const { requirements } = req.body;
    
    if (!requirements) {
      return res.status(400).json({ error: 'Molecule requirements are required' });
    }
    
    // Create a unique request ID
    const requestId = uuidv4();
    
    // Configure the system prompt for neuropharmacology molecule design
    const systemPrompt = `You are a world-class expert in neuropharmacology, medicinal chemistry, and drug discovery with decades of experience designing innovative neuropharmaceutical compounds. Your role is to generate, evaluate, and iteratively refine candidate molecules for a novel ADHD treatment—a next-generation Adderall alternative. Leverage cutting-edge scientific literature, advanced cheminformatics simulations, and regulatory pathway analysis to provide detailed, step-by-step chain-of-thought explanations that include literature citations, predicted molecular properties (binding affinity, toxicity, metabolic stability, synthetic yield), and projections on production feasibility and FDA approval timelines. Your responses should be interactive and actionable, outlining potential 3D visualization and direct chemical editing operations to empower researchers in refining and validating each candidate.`;
    
    // Build the user prompt with the requirements
    const userPrompt = `Design novel molecules that meet the following requirements:
${requirements}

For each molecule, provide:
1. SMILES string
2. Chemical name
3. How this molecule meets the specified requirements
4. Your rationale for the design choices
5. Detailed predicted molecular properties (binding affinity, toxicity, metabolic stability)
6. Literature citations for similar compounds
7. FDA approval timeline projections

Make sure to prioritize selectivity for the target and drug-like properties for ADHD treatment.`;
    
    // Call Claude API
    const claudeResponse = await askClaude(systemPrompt, userPrompt);
    
    // Process the response to extract molecules
    const generatedMolecules = await processMoleculeDesign(claudeResponse);
    
    // Save the results
    const resultData = {
      id: requestId,
      timestamp: new Date().toISOString(),
      requirements,
      claudeResponse,
      generatedMolecules
    };
    
    const resultFile = path.join(resultsDir, `${requestId}.json`);
    fs.writeFileSync(resultFile, JSON.stringify(resultData, null, 2));
    
    // For each generated molecule, run ADMET predictions
    const enhancedMolecules = await Promise.all(
      generatedMolecules.map(async (molecule) => {
        try {
          // Call ADMET prediction
          const admetResponse = await axios.post('http://localhost:5000/api/simulation/admet', {
            smiles: molecule.smiles
          });
          
          // Add ADMET results to the molecule
          return {
            ...molecule,
            admet: admetResponse.data
          };
        } catch (err) {
          logger.error(`Error getting ADMET for ${molecule.smiles}: ${err.message}`);
          return molecule; // Return molecule without ADMET if there's an error
        }
      })
    );
    
    // Return the initial results
    return res.json({
      requestId,
      molecules: enhancedMolecules,
      claudeResponse: claudeResponse.content,
    });
  } catch (error) {
    logger.error(`Error in molecule generation: ${error.message}`);
    return res.status(500).json({ error: error.message });
  }
});

// Analyze generated molecules
router.post('/analyze-molecules', async (req, res) => {
  try {
    const { molecules, targetReceptors, focus } = req.body;
    
    if (!molecules || !Array.isArray(molecules) || molecules.length === 0) {
      return res.status(400).json({ error: 'At least one molecule is required' });
    }
    
    if (!targetReceptors || !Array.isArray(targetReceptors) || targetReceptors.length === 0) {
      return res.status(400).json({ error: 'Target receptors are required' });
    }
    
    // Create formatted molecules list
    const moleculesFormatted = molecules.map((mol, index) => {
      return `Molecule ${index + 1}:
- SMILES: ${mol.smiles}
- Name: ${mol.name || 'Unknown'}
${mol.properties ? `- Properties: ${JSON.stringify(mol.properties)}` : ''}
${mol.admet ? `- ADMET: ${JSON.stringify(mol.admet)}` : ''}`;
    }).join('\n\n');
    
    // Configure the system prompt
    const systemPrompt = `You are a world-class expert in neuropharmacology, medicinal chemistry, and drug discovery with decades of experience designing innovative neuropharmaceutical compounds. Your role is to generate, evaluate, and iteratively refine candidate molecules for a novel ADHD treatment—a next-generation Adderall alternative. Leverage cutting-edge scientific literature, advanced cheminformatics simulations, and regulatory pathway analysis to provide detailed, step-by-step chain-of-thought explanations that include literature citations, predicted molecular properties (binding affinity, toxicity, metabolic stability, synthetic yield), and projections on production feasibility and FDA approval timelines. Your responses should be interactive and actionable, outlining potential 3D visualization and direct chemical editing operations to empower researchers in refining and validating each candidate.`;
    
    // Build the user prompt for analysis
    let userPrompt = `Analyze the following molecules for their potential as ADHD treatments targeting the following receptors: ${targetReceptors.join(', ')}\n\n${moleculesFormatted}\n\n`;
    
    if (focus) {
      userPrompt += `Please focus your analysis on: ${focus}\n\n`;
    }
    
    userPrompt += `For each molecule, please provide:\n
1. Overall assessment as a potential ADHD treatment\n
2. Predicted binding affinity to each target receptor\n
3. Potential side effects\n
4. Suggestions for structural modifications to improve efficacy or reduce side effects\n
5. Risk assessment for regulatory approval\n
`;
    
    // Call Claude for analysis
    const analysisResponse = await askClaude(systemPrompt, userPrompt);
    
    // Create a unique request ID
    const requestId = uuidv4();
    
    // Save the results
    const resultData = {
      id: requestId,
      timestamp: new Date().toISOString(),
      molecules,
      targetReceptors,
      focus,
      analysisResponse
    };
    
    const resultFile = path.join(resultsDir, `analysis_${requestId}.json`);
    fs.writeFileSync(resultFile, JSON.stringify(resultData, null, 2));
    
    // Return the analysis
    return res.json({
      requestId,
      analysis: analysisResponse.content,
    });
  } catch (error) {
    logger.error(`Error in molecule analysis: ${error.message}`);
    return res.status(500).json({ error: error.message });
  }
});

// Optimize molecule
router.post('/optimize-molecule', async (req, res) => {
  try {
    const { smiles, name, targetProperty, constraints, description } = req.body;
    
    if (!smiles) {
      return res.status(400).json({ error: 'SMILES string is required' });
    }
    
    if (!targetProperty) {
      return res.status(400).json({ error: 'Target property to optimize is required' });
    }
    
    // Create a unique request ID
    const requestId = uuidv4();
    
    // Configure the system prompt
    const systemPrompt = `You are a world-class expert in neuropharmacology, medicinal chemistry, and drug discovery with decades of experience designing innovative neuropharmaceutical compounds. Your role is to generate, evaluate, and iteratively refine candidate molecules for a novel ADHD treatment—a next-generation Adderall alternative. Leverage cutting-edge scientific literature, advanced cheminformatics simulations, and regulatory pathway analysis to provide detailed, step-by-step chain-of-thought explanations that include literature citations, predicted molecular properties (binding affinity, toxicity, metabolic stability, synthetic yield), and projections on production feasibility and FDA approval timelines. Your responses should be interactive and actionable, outlining potential 3D visualization and direct chemical editing operations to empower researchers in refining and validating each candidate.`;
    
    // Try to get current properties
    let propertiesInfo = '';
    try {
      const propertiesResponse = await axios.post('http://localhost:5000/api/simulation/properties', {
        smiles: smiles
      });
      
      if (!propertiesResponse.data.error) {
        propertiesInfo = `\nCurrent properties:\n${JSON.stringify(propertiesResponse.data, null, 2)}`;
      }
    } catch (err) {
      logger.warn(`Could not get properties for ${smiles}: ${err.message}`);
    }
    
    // Build the user prompt
    const userPrompt = `Optimize the following molecule to improve its ${targetProperty} while maintaining its activity as an ADHD treatment:\n\nSMILES: ${smiles}\nName: ${name || 'Unknown compound'}${propertiesInfo}\n\n${description ? `Additional context: ${description}\n\n` : ''}${constraints ? `Optimization constraints: ${constraints}\n\n` : ''}\nPlease provide:\n1. 3-5 optimized variants of this molecule (with SMILES strings)\n2. Explanation of each structural modification\n3. Predicted improvement in ${targetProperty}\n4. Any potential trade-offs\n5. Synthesis route considerations`;
    
    // Call Claude API for optimization
    const optimizationResponse = await askClaude(systemPrompt, userPrompt);
    
    // Try to extract optimized molecules
    const extractedSMILES = extractSMILES(optimizationResponse.content[0].text);
    
    // Save the results
    const resultData = {
      id: requestId,
      timestamp: new Date().toISOString(),
      originalSmiles: smiles,
      targetProperty,
      constraints,
      optimizationResponse,
      extractedSMILES
    };
    
    const resultFile = path.join(resultsDir, `optimization_${requestId}.json`);
    fs.writeFileSync(resultFile, JSON.stringify(resultData, null, 2));
    
    // Return the results
    return res.json({
      requestId,
      optimization: optimizationResponse.content,
      optimizedMolecules: extractedSMILES
    });
  } catch (error) {
    logger.error(`Error in molecule optimization: ${error.message}`);
    return res.status(500).json({ error: error.message });
  }
});

// Compare molecules
router.post('/compare-molecules', async (req, res) => {
  try {
    const { molecules, criteria } = req.body;
    
    if (!molecules || !Array.isArray(molecules) || molecules.length < 2) {
      return res.status(400).json({ error: 'At least two molecules are required for comparison' });
    }
    
    // Create formatted molecules list
    const moleculesFormatted = molecules.map((mol, index) => {
      return `Molecule ${index + 1}:\n- SMILES: ${mol.smiles}\n- Name: ${mol.name || 'Unknown'}${mol.properties ? `\n- Properties: ${JSON.stringify(mol.properties)}` : ''}${mol.admet ? `\n- ADMET: ${JSON.stringify(mol.admet)}` : ''}`;
    }).join('\n\n');
    
    // Configure the system prompt
    const systemPrompt = `You are a world-class expert in neuropharmacology, medicinal chemistry, and drug discovery with decades of experience designing innovative neuropharmaceutical compounds. Your role is to generate, evaluate, and iteratively refine candidate molecules for a novel ADHD treatment—a next-generation Adderall alternative. Leverage cutting-edge scientific literature, advanced cheminformatics simulations, and regulatory pathway analysis to provide detailed, step-by-step chain-of-thought explanations that include literature citations, predicted molecular properties (binding affinity, toxicity, metabolic stability, synthetic yield), and projections on production feasibility and FDA approval timelines. Your responses should be interactive and actionable, outlining potential 3D visualization and direct chemical editing operations to empower researchers in refining and validating each candidate.`;
    
    // Build the user prompt
    let userPrompt = `Compare the following molecules as potential ADHD treatments:\n\n${moleculesFormatted}\n\n`;
    
    if (criteria && criteria.length > 0) {
      userPrompt += `Please focus your comparison on the following criteria: ${criteria.join(', ')}\n\n`;
    } else {
      userPrompt += 'Please compare these molecules on efficacy, safety, pharmacokinetics, and development potential.\n\n';
    }
    
Then, rank the molecules from most to least promising and explain your reasoning.`;
    
    // Call Claude for analysis
    const analysisResponse = await askClaude(systemPrompt, userPrompt);
    
    // Create a unique request ID
    const requestId = uuidv4();
    
    // Save the results
    const resultData = {
      id: requestId,
      timestamp: new Date().toISOString(),
      molecules,
      criteria,
      analysisResponse
    };
    
    const resultFile = path.join(resultsDir, `comparison_${requestId}.json`);
    fs.writeFileSync(resultFile, JSON.stringify(resultData, null, 2));
    
    // Return the comparison
    return res.json({
      requestId,
      comparison: analysisResponse.content,
    });
  } catch (error) {
    logger.error(`Error in molecule comparison: ${error.message}`);
    return res.status(500).json({ error: error.message });
  }
});

module.exports = router;
